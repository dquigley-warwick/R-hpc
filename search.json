[{"path":"/articles/quickstart.html","id":"setting-up-r","dir":"Articles","previous_headings":"","what":"Setting up R","title":"Quick Start","text":"","code":"which R module load GCC/11.2.0 OpenMPI/4.1.1 R/4.1.2 which R"},{"path":"/articles/quickstart.html","id":"running-an-interactive-job","dir":"Articles","previous_headings":"","what":"Running an interactive job","title":"Quick Start","text":"simplest way request interactive job use Slurm’s srun command specify want run shell (specified $SHELL environment variable) connected terminal input output (--pty). addition, need specify account requested resources budgeted (--account) can running: see command prompt changes user@login user$nodeXX, means now connected compute node instead login node. , allowed run heavy computations within resource constraints specified. First, let’s get overview processes already running node. can running resource monitor htop: overview, can see many cores compute node , many processes running, much memory used. Depending much resources requested (overall load), see least resource allocation still free. , however, need stay within allocation (overall amount available resources), otherwise processes terminated automatically. loaded R module beforehand, ’ll see $PATH (environment variable shell looks executables) still set include R. can check asking R path: can run via command-line, can local machines well. give us R command prompt: can use R use R shell e.g. RStudio well:","code":"srun --account su105 --pty $SHELL htop which R R #>  #> R version 4.1.2 (2021-11-01) -- \"Bird Hippie\" #> Copyright (C) 2021 The R Foundation for Statistical Computing #> Platform: x86_64-pc-linux-gnu (64-bit) #>  #> R is free software and comes with ABSOLUTELY NO WARRANTY. #> You are welcome to redistribute it under certain conditions. #> Type 'license()' or 'licence()' for distribution details. #>  #>   Natural language support but running in an English locale #>  #> R is a collaborative project with many contributors. #> Type 'contributors()' for more information and #> 'citation()' on how to cite R or R packages in publications. #>  #> Type 'demo()' for some demos, 'help()' for on-line help, or #> 'help.start()' for an HTML browser interface to help. #> Type 'q()' to quit R. #>  #> > quit() x = 5 y = 3 x * y #> [1] 15"},{"path":"/articles/quickstart.html","id":"copying-files","dir":"Articles","previous_headings":"","what":"Copying files","title":"Quick Start","text":"different options getting files compute cluster. One option edit files locally, copy SSH. , instance, one local file text.txt copy : specified host ~/.ssh/config , otherwise may need specify user name, key file, host manually (look differently using graphical SSH client). : used scp command know one remote end, .e. use following copy file remote local end: , scp command looks test.sh home directory (~; default directory specified) copy current directory (.). want copy directories need use recursive copying, .e. scp -r. Another, maybe better alternative rsync command. keep timestamps intact, can used copy files updated timestamps (-u) compared local files (-v print files copying):","code":"scp text.txt host: scp host:test.txt . rsync -uvr host:test.txt ."},{"path":"/articles/quickstart.html","id":"editing-files","dir":"Articles","previous_headings":"","what":"Editing files","title":"Quick Start","text":"either making small changes iterative work, often convenient edit files directly computing cluster instead editing locally copy . multiple text-based editors work terminal, nano, emacs vim. nano minimalist editor without special features, often recommended users new terminal. problem get quickly stuck local optimum, can make simple changes file, never get features syntax highlighting. two editors hand either can extended /every feature imaginable. course, show basic features nvim (neovim, modern implementation vim) instead. already user emacs, please feel free use editor instead. edit simple text file, can run: see console gets cleared, shown contents empty file instead. Try typing couple file: see characters show , another text editor well. Notice, however, first typed show , subsequent . editor “normal” “edit” mode. typing first , switched first latter. can now use Esc switch back edit normal mode. can type :w Enter write file, :wq write file quit editor. :q! exit without saving changes. need know make vim useful nano. However, many features can explore running vimtutor command-line.","code":"nvim myfile.txt aaaa"},{"path":"/articles/quickstart.html","id":"compute-resources","dir":"Articles","previous_headings":"","what":"Compute resources","title":"Quick Start","text":"now, submitted job specifying minimum required parameters relying defaults others. instance, specific partition, one several job queues can submit jobs . get overview available, can use sinfo command: , see different partitions listed number nodes associated , including walltime (maximum amount time job can request) queue. see one queue marked *. denotes default queue, using specifying particular queue via --partition parameter. One argument specify explain detail account. specifies connection user name collection resources available can use, subtracted budget. can check accounts user access typing: likely belong one account, project, time (one created course).","code":"sinfo sacctmgr show associations where user=<your user name>"},{"path":"/articles/quickstart.html","id":"job-submission-scripts","dir":"Articles","previous_headings":"","what":"Job submission scripts","title":"Quick Start","text":"Usually, want run complex computations can specified single srun. running multiple commands multiple hosts, often better specify resource requirements exact commands using job submission script. may look like following: can submit script saving script file running sbatch <script>. tell us something like: Submitted batch job 1290046 number identifier job (different multiple runs). started , can check jobs user running typing: list job ID, show currently running, node job running . can also get detailed information job using scontrol: information available job running (short) time finished. can now also see resources explicitly request, e.g. time limit 1 hour, used compute partition, able use 2 Gb memory. job started, create output file called slurm-xxxxxx.(xxxxxx job id) standard output command (standard output otherwise printed console). finished, contain output uname -n, name node command run . went well, contain nodeXX login, means run one compute nodes. ’s quite lines , let’s break : #!/bin/sh called shebang specifies application used run script, required sbatch (otherwise refuse submit job) #SBATCH --account needed budget resources correctly #SBATCH --parititon time specific compute partition explicitly #SBATCH --ntasks lists tasks (computations) job contains #SBATCH --cpus-per-task specifies numbers CPUs per task #SBATCH --mem specifies amount memory requested; total, options include --mem-per-task, --mem-per-cpu, --mem-per-gpu. Memory multipliers K, M G supported (kilobytes, megabytes gigabytes, respectively). #SBATCH commands need directly following shebang, otherwise ignored srun specifies command run; required running individual computations, helps set parallel helpers, running call per task, e.g. setting MPI used","code":"#!/bin/sh #SBATCH --account su105 #SBATCH --partition compute #SBATCH --ntasks 1 #SBATCH --cpus-per-task 1 #SBATCH --mem 1024M  srun uname -n squeue -u <username> scontrol show jobid <jobid>"},{"path":"/articles/quickstart.html","id":"exercise","dir":"Articles","previous_headings":"Job submission scripts","what":"Exercise","title":"Quick Start","text":"Create batch submission script using editor cluster Submit using sbatch <script>, without srun. changes? happens change ntasks paramter 2, without srun command?","code":""},{"path":"/articles/quickstart.html","id":"submitting-an-r-script-as-job","dir":"Articles","previous_headings":"","what":"Submitting an R script as job","title":"Quick Start","text":"…","code":""},{"path":[]},{"path":"/articles/rscripts.html","id":"section","dir":"Articles","previous_headings":"","what":"…","title":"R on HPC","text":"","code":"module load rjags/4-10-R-4.1.2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schubert. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schubert M (2022). Rhpc: R-hpc Course Material. R package version 0.0.1, https://mschubert.github.io/R-hpc/.","code":"@Manual{,   title = {Rhpc: R-hpc Course Material},   author = {Michael Schubert},   year = {2022},   note = {R package version 0.0.1},   url = {https://mschubert.github.io/R-hpc/}, }"},{"path":"/index.html","id":"header","dir":"","previous_headings":"","what":"R-hpc Course Material","title":"R-hpc Course Material","text":"content","code":""},{"path":[]}]
